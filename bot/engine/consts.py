# The pieces' shapes, ordered by their value plus one on the `PieceType` enum and rotation
# Each shape is stored as a list of the coordinate offsets for each mino
#
# i.e.: SHAPES[<type: PieceType>][<rotation: int>] -> [(y, x), ...]
#
# Notes:
#   - This does not simply use something like `numpy.rot90`
#     as the shapes don't have consistent centers
#   - TTC's approach[^1] does not work with 180 kicks as far as I'm aware
#
# [^1]: https://harddrop.com/wiki/SRS#How_Guideline_SRS_Really_Works

SHAPES = [
    [
        [(1, 0), (1, 1), (1, 2), (1, 3)],
        [(0, 2), (1, 2), (2, 2), (3, 2)],
        [(2, 0), (2, 1), (2, 2), (2, 3)],
        [(0, 1), (1, 1), (2, 1), (3, 1)],
    ],
    [
        [(0, 2), (1, 0), (1, 1), (1, 2)],
        [(0, 1), (1, 1), (2, 1), (2, 2)],
        [(1, 0), (1, 1), (1, 2), (2, 0)],
        [(0, 0), (0, 1), (1, 1), (2, 1)],
    ],
    [
        [(0, 0), (1, 0), (1, 1), (1, 2)],
        [(0, 1), (0, 2), (1, 1), (2, 1)],
        [(1, 0), (1, 1), (1, 2), (2, 2)],
        [(0, 1), (1, 1), (2, 0), (2, 1)],
    ],
    [
        [(0, 1), (0, 2), (1, 0), (1, 1)],
        [(0, 1), (1, 1), (1, 2), (2, 2)],
        [(1, 1), (1, 2), (2, 0), (2, 1)],
        [(0, 0), (1, 0), (1, 1), (2, 1)],
    ],
    [
        [(0, 0), (0, 1), (1, 1), (1, 2)],
        [(0, 2), (1, 1), (1, 2), (2, 1)],
        [(1, 0), (1, 1), (2, 1), (2, 2)],
        [(0, 1), (1, 0), (1, 1), (2, 0)],
    ],
    [
        [(0, 1), (1, 0), (1, 1), (1, 2)],
        [(0, 1), (1, 1), (1, 2), (2, 1)],
        [(1, 0), (1, 1), (1, 2), (2, 1)],
        [(0, 1), (1, 0), (1, 1), (2, 1)],
    ],
    [
        [(0, 1), (0, 2), (1, 1), (1, 2)],
        [(0, 1), (0, 2), (1, 1), (1, 2)],
        [(0, 1), (0, 2), (1, 1), (1, 2)],
        [(0, 1), (0, 2), (1, 1), (1, 2)],
    ],
]

# Kick-table to be applied for SRS rotation, ordered with the "from" and "to" rotations
# same rotation kicks are never used so they're marked as [...]

SRS_KICKS = [
    [
        [...],
        [(+0, -1), (-1, -1), (+2, +0), (+2, -1)],
        [(-1, +0), (-1, +1), (-1, -1), (+0, +1), (+0, -1)],
        [(+0, +1), (-1, +1), (+2, +0), (+2, +1)],
    ],
    [
        [(+0, +1), (+1, +1), (-2, +0), (-2, +1)],
        [...],
        [(+0, +1), (+1, +1), (-2, +0), (-2, +1)],
        [(+0, +1), (-2, +1), (-1, +1), (-2, +0), (-1, +0)],
    ],
    [
        [(+1, +0), (+1, -1), (+1, +1), (+0, -1), (+0, +1)],
        [(+0, -1), (-1, -1), (+2, +0), (+2, -1)],
        [...],
        [(+0, +1), (-1, +1), (+2, +0), (+2, +1)],
    ],
    [
        [(+0, -1), (+1, -1), (-2, +0), (-2, -1)],
        [(+0, -1), (-2, -1), (-1, -1), (-2, +0), (-1, +0)],
        [(+0, -1), (+1, -1), (-2, +0), (-2, -1)],
        [...],
    ],
]

# Same as above but for the I piece only

SRS_I_KICKS = [
    [
        [...],
        [(+0, -1), (+0, +1), (+1, -2), (-2, +1)],
        [(-1, +0), (-1, +1), (-1, -1), (+0, +1), (+0, -1)],
        [(+0, -1), (+0, +2), (-2, -1), (+1, +2)],
    ],
    [
        [(+0, +2), (+0, -1), (-1, +2), (+2, -1)],
        [...],
        [(+0, -1), (+0, +2), (-2, -1), (+1, +2)],
        [(+0, +1), (-2, +1), (-1, +1), (-2, +0), (-1, +0)],
    ],
    [
        [(+1, +0), (+1, -1), (+1, +1), (+0, -1), (+0, +1)],
        [(+0, +1), (+0, -2), (+2, +1), (-1, +2)],
        [...],
        [(+0, +2), (+0, -1), (-1, +2), (+2, -1)],
    ],
    [
        [(+0, +1), (+0, -2), (+2, +1), (-1, -2)],
        [(+0, -1), (-2, -1), (-1, -1), (-2, +0), (-1, +0)],
        [(+0, -2), (+0, +1), (+1, -2), (-2, +1)],
        [...],
    ],
]
